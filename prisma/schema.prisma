generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Shortlink {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid())
  slug      String   @unique
  url       String
  createdAt DateTime @default(now())
}

model Config {
  id    Int    @id @default(autoincrement())
  key   String
  value String
}

model User {
  id        Int        @id @default(autoincrement())
  fullname  String
  username  String     @unique
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userPlans UserPlan[]
  articles  Article[]
  profiles  Profile[]
  projects  Project[]
  skill     Skill[]
  experience Experience[]
  education Education[]

}

model UserPlan {
  id        Int      @id @default(autoincrement())
  userId    Int
  planId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan      Plan     @relation(fields: [planId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Plan {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  price       Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userPlans   UserPlan[]
}
model Article {
  id         Int        @id @default(autoincrement())
  title      String
  content    String
  slug       String
  published  Boolean    @default(false)
  authorId   Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  author     User       @relation(fields: [authorId], references: [id])
  categories ArticleCategory[] @relation("ArticleCategories")
  @@index([authorId])
}

model ArticleCategory {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  articles  Article[] @relation("ArticleCategories")
}


model Profile {
  id          Int      @id @default(autoincrement())
  userId      Int
  bio         String?
  profilePic  String?
  twitterUrl  String?
  linkedInUrl String?
  githubUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
}


model Project {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  url         String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int

  user        User     @relation(fields: [userId], references: [id])
}

model Skill {
  id          Int      @id @default(autoincrement())
  name        String
  level       String   // e.g., Beginner, Intermediate, Expert
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int

  user        User     @relation(fields: [userId], references: [id])
}

model Experience {
  id          Int      @id @default(autoincrement())
  company     String
  position    String
  startDate   DateTime
  endDate     DateTime?
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int

  user        User     @relation(fields: [userId], references: [id])
}

model Education {
  id          Int      @id @default(autoincrement())
  institution String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int

  user        User     @relation(fields: [userId], references: [id])
}

model Contact {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  message     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

